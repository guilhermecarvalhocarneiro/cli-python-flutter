/// Service do model AppName

/// Os Métodos padrões gerados são:
///     fecthAll() -> Recupera a lista de Agendamento da API.
///     detail()   -> Recupera os detalhes de Agendamento da API.
///     post()     -> Salva os dados de uma instância do Agendamento na API.
///     put()      -> Atualiza os dados de uma instância do Agendamento na API.
///     delete()   -> Deleta os dados de uma instância do Agendamento na API.

/// Os métodos de acesso à API devem ser implementados no nessa classe.

/// [Travar o arquivo]
/// Caso deseje "travar" o arquivo para não ser parseado novamente
/// pelo manage do Django adicione um # antes da palavra abaixo
/// FileLocked

import 'package:dio/dio.dart';
import 'package:get_it/get_it.dart';

import 'model.dart';
import '../../../utils/config.dart';
import '../../../utils/custom_dio.dart';
import '../../../utils/process.controller.dart';

class AppNameService {
  static String _uri = "";

  // Criando uma instância privada do AppNameModel
  AppNameModel _appName = AppNameModel();

  // Criando uma instância privada de List<AppNameModel>
  List<AppNameModel> _appNameList = List<AppNameModel>();

  // Instanciando o Controller Process
  ProcessController _processController = GetIt.I<ProcessController>();

  // Construtor
  AppNameService({AppNameModel appName, List<AppNameModel> appNameList}) {
    if (appName != null) _appName = appName;
  }

  // Método para retornar o AppName principal
  Future<List<AppNameModel>> fetchAll() async {    
    try {
      String _url;
      _appNameList?.clear();
      CustomDio _dio = CustomDio(_url);
      _dio.makeHeadersAuthentication();
      var dataResponse = await _dio.getHttp();
      if (dataResponse != null) {
        _appNameList?.clear();
        _success("ok");
        String _next = dataResponse["next"] ?? "";
        String _previous = dataResponse["previous"] ?? "";
        for (var data in dataResponse["results"]) {
          AppNameModel appNameModel = AppNameModel.fromJson(data);
          appNameModel.nextUrl = _next;
          appNameModel.previousUrl = _previous;
          _appNameList.add(appNameModel);
        }
      }
    } catch (error, exception) {
      _error(error, exception.toString());
    }
    return _appNameList;
  }

  // Método para retornar o AppName principal
  Future<List<AppNameModel>> getMore(String uri) async {
    List<AppNameModel> _appNameList = List<AppNameModel>();
    String _url;
    try {
      CustomDio _dio = CustomDio(_url);
      _dio.makeHeadersAuthentication();
      var dataResponse = await _dio.getHttp();
      if (dataResponse != null) {
        String _next = dataResponse["next"] ?? "";
        String _previous = dataResponse["previous"] ?? "";
        for (var data in dataResponse["results"]) {
          AppNameModel appNameModel = AppNameModel.fromJson(data);
          appNameModel.nextUrl = _next;
          appNameModel.previousUrl = _previous;
          _appNameList.add(appNameModel);
        }
        _success("ok");
      }
    } catch (error, exception) {
      _error(error, exception.toString());
    }
    return _appNameList;
  }

  /// Método para detalhar um AppName da API
  Future<AppNameModel> detail(AppNameModel appName) async {
    String _url = "";

    try {
      CustomDio _dio = CustomDio(_url);
      var data = await _dio.getHttp();
      if (data != null) {
        _appName = AppNameModel.fromJson(data);
      }
    } catch (error, exception) {
        _error(error.toString(), exception.toString());
    }
    return _appName;
  }  

  // Método para criar um novo appName na API
  Future<AppNameModel> post(AppNameModel appName) async {
    try {
      String _uri = "${Config.uri}appName";
      CustomDio _dio = CustomDio(_uri);
      _dio.makeHeadersAuthentication();
      var data = appName.toJson();
      var dataResponse = await _dio.postHttp(data);
      if (dataResponse != null) {
        appName = AppNameModel.fromJson(dataResponse);
        _success("ok");
      }
    } catch (error, exception) {
      _error(error, exception.toString());
    }
    return appName;
  }

  Future<AppNameModel> put(AppNameModel appName) async {
    try {
      String _uri = "${Config.uri}appName/${appName.id}";
      CustomDio _dio = CustomDio(_uri);
      _dio.makeHeadersAuthentication();
      // Criando o elemento JSON conforme documentação para atualizar
      // apenas os campos permitidos.
      FormData data = FormData.fromMap({});
      var dataResponse = await _dio.patchHttp(data);
      if (dataResponse != null) {
        _success("ok");
        return AppNameModel.fromJson(dataResponse);
      }
    } catch (error, exception) {
      _error(error, exception.toString());
    }
    return null;
  }

  Future<bool> delete(AppNameModel appName) async {
    try {
      String _uri = "${Config.uri}appName/${appName.id}";
      CustomDio _dio = CustomDio(_uri);
      _dio.makeHeadersAuthentication();
      var data = appName.toJson();
      var dataResponse = await _dio.deleteHttp(data, appName.id.toString());
      if (dataResponse != null) {
        _success("ok");
        return true;
      }
      return false;
    } catch (error, exception) {
      _error(error, exception.toString());
      return false;
    }
  }
 
 /// Métodos para tratar o retorno do processamento
 void _success(String message) async {
   try {
     _processController.withSuccess(message: message);
   } catch (error) {
     DebugPrint.imprimir("Ocorreu um erro no service de AppName: $error");
   }
 }
 
 void _error(String error, String exception) async {
   try {
     _processController.withError(
       error: error,
       exception: exception,
     );
   } catch (error) {
     DebugPrint.imprimir("Ocorreu um erro no service de AppName: $error");
   }
 }
}