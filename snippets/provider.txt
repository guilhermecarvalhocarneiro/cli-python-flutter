/// Provider do model AppName

/// Os Métodos padrões gerados são:
///   Métodos da API
///     fecthAll() -> Recupera a lista de AppName.
///     reload() -> Recarrega a lista de AppName.
///     detail() -> Recupera os detalhes de um AppName.
///     post() -> Salva um novo AppName.
///     put() -> Atualiza os dados de um AppName.
///     delete() -> Deleta um AppName.

///   Métodos do Data
///     fetchLocal() -> Recupera a lista de AppName
///     reloadLocal() -> Recarrega a lista de AppName
///     detailLocal() -> Recupera os detalhes de um AppName
///     saveLocal() -> Salva um novo AppName
///     updateLocal() -> Atualiza um novo AppName
///     deleteLocal() -> Deleta um novo AppName
///     deleteAllLocal() -> Deleta um novo AppName

///
/// As regras de negócio devem ser implementadas nesse arquivo evitando ao máximo
/// de serem implementadas nos arquivos das views/pages.
///
/// Os métodos de acesso à API devem ser implementados no Service.

/// [Travar o arquivo]
/// Caso deseje "travar" o arquivo para não ser parseado novamente
/// pelo manage do Django adicione um # antes da palavra abaixo
/// FileLocked

import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';

import 'data.dart';
import 'model.dart';
import 'service.dart';

class AppNameProvider extends ChangeNotifier {
  AppNameData _appNameData = AppNameData();
  AppNameService _appNameService = AppNameService();
  AppNameModel appNameLocalModel = AppNameModel();
  AppNameModel appNameModel = AppNameModel();  
  List<AppNameModel> appNameList = List<AppNameModel>();
  List<AppNameModel> appNameLocalList = List<AppNameModel>();

  fetch() async{
    try{
      appNameList = await _appNameService.fetch();
      notifyListeners();
    } catch (error, exception) {
      _error(error.toString(), exception.toString());
    }
  }
  
  reload() async{
    try{
      appNameList.clear();
      fetch();
      notifyListeners();
    } catch (error, exception) {
      _error(error.toString(), exception.toString());
    }
  }

  detail() async{
    try{
      appNameModel = await _appNameService.detail(appNameModel);
      notifyListeners();
    } catch (error, exception) {
      _error(error.toString(), exception.toString());
    }
  }

  post() async{
    try{
      appNameModel = await _appNameService.post(appNameModel);
      notifyListeners();
    } catch (error, exception) {
      _error(error.toString(), exception.toString());
    }
  }

  put() async{
    try{
      appNameModel = await _appNameService.put(appNameModel);
      notifyListeners();
    } catch (error, exception) {
      _error(error.toString(), exception.toString());
    }
  }

  delete() async{
    try{
      final bool _result = await _appNameService.delete(appNameModel);
      if(_result){
        _success("ok");
        notifyListeners();
      }
    } catch (error, exception) {
      _error(error.toString(), exception.toString());
    }
  }

  fetchLocal() async{
    try{
      appNameLocalList = await _appNameData.fetch();
      notifyListeners();
    } catch (error, exception) {
      _error(error.toString(), exception.toString());
    }
  }
  
  reloadLocal() async{
    try{
      appNameLocalList.clear();
      fetchLocal();
      notifyListeners();
    } catch (error, exception) {
      _error(error.toString(), exception.toString());
    }
  }

  detailLocal(int id) async{
    try{
      appNameLocalModel = await _appNameData.get(id);
      notifyListeners();
    } catch (error, exception) {
      _error(error.toString(), exception.toString());
    }
  }

  saveLocal(AppNameModel model) async{
    try{
      final bool _result = await _appNameData.save(model);
      if(_result){
        appNameLocalModel = model;
        notifyListeners();
      }
    } catch (error, exception) {
      _error(error.toString(), exception.toString());
    }
  }
  updateLocal(AppNameModel model) async{
    try{
      final bool _result = await _appNameData.update(model);
      if(_result){
        appNameLocalModel = model;
        notifyListeners();
      }
    } catch (error, exception) {
      _error(error.toString(), exception.toString());
    }
  }

  deleteLocal(int id) async{
    try{
      _appNameData.delete(id);
      notifyListeners();
    } catch (error, exception) {
      _error(error.toString(), exception.toString());
    }
  }

  deleteAllLocal() async{
    try{
      await _appNameData.deleteAll();
      notifyListeners();
    } catch (error, exception) {
      _error(error.toString(), exception.toString());
    }
  }

  void _success(String message) async {
    try {
      // _processProvider.withSuccess(message: message);
    } catch (e) {
      debugPrint(message);
    }
  }

  void _error(String error, String exception) async {
    debugPrint("Ocorreu um erro no método error: $error");
  }

}