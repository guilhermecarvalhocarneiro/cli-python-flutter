/// Views List da AppName

/// [Travar o arquivo]
/// Caso deseje "travar" o arquivo para não ser parseado novamente
/// pelo manage do Django adicione um # antes da palavra abaixo
/// FileLocked

import 'package:get_it/get_it.dart';
import 'package:flutter/material.dart';
import 'package:mobx/mobx.dart';

import 'widget.dart';
import '../model.dart';
import '../controller.dart';
import '../../../../user_interface/font.dart';
import '../../../../user_interface/widget.dart';
import '../../../../utils/process.controller.dart';

class ListAppNamePage extends StatefulWidget {
  @override
  _ListAppNamePageState createState() => _ListAppNamePageState();
}

class _ListAppNamePageState extends State<ListAppNamePage> {
  
  // Instanciando o controller do Scaffold
  final GlobalKey<ScaffoldState> _scaffoldKey = GlobalKey<ScaffoldState>();

  // Instanciando o ScrollController
  final ScrollController _scrollController = ScrollController();

  // Instanciando o controller de processamento
  ProcessController _processController = GetIt.I.get<ProcessController>();

  // Instanciando um controller para Animações
  AnimationController _animationController = AnimationController(vsync: null);

  // Instanciando uma lista de Disposes das Reactions
  List<ReactionDisposer> _disposers = [];

  // Istanciando o controller do AppName
  AppNameController _appNameController = GetIt.I.get<AppNameController>();

  // Declarando o model do AppName
  AppNameModel _model = AppNameModel();

  @override
  void initState() {
    // Criando a reaction para mostrar a Snackbar
    // conforme o retorno do _processController.sucess
    _disposers.add(
      autorun((_) {
        if (_processController.success == true) {
          _showMessage(_processController.message);
          _hideKeyboard(context);
        } else if (_processController.success == false) {
          _showMessage(_processController.error,
              error: true);
        }
      }),
    );    
    _model = _appNameController.appNameModel;
    super.initState();
  }

  @override
  void dispose() {
    _disposers.forEach((dispose) => dispose());
    _scrollController?.dispose();
    _animationController?.dispose();
    _model = null;
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      key: _scaffoldKey,
      extendBodyBehindAppBar: true,
      appBar: AppBar(
        backgroundColor: Colors.transparent
      ),
      body: _buildBody(),
    );
  }

  Widget _buildBody() {
    return Stack(
      children: <Widget> [
        HeadWidget(),
        _buildPage()
      ]
    );
  }

  Widget _buildPage() {
    return Container();
  }

  /// Método para mostrar/ocultar a barra de mensagem para o usuário
  ///    Parameters:
  ///      message -> String contendo a mensagem a ser mostrada.
  ///      error -> bool para determinar se a mensagem é de erro ou não.
  _showMessage(String message, {bool error = false}) {
    setState(() {
      _scaffoldKey.currentState.showSnackBar(
        error == false
            ? customSuccessSnackbar(message)
            : customErrorSnackbar(message),
      );
    });
  }

  /// Método para ocultar o teclado após o usuário clicar no botão de Salvar
  ///    Parameters:
  ///        context -> BuildContext
  _hideKeyboard(BuildContext context) {
    FocusScope.of(context).requestFocus(FocusNode());
  }
}

