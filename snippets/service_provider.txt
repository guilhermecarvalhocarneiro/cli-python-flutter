/// Service do model AppName

/// Os Métodos padrões gerados são:
///     fecthAll() -> Recupera a lista de Agendamento da API.
///     detail()   -> Recupera os detalhes de Agendamento da API.
///     post()     -> Salva os dados de uma instância do Agendamento na API.
///     put()      -> Atualiza os dados de uma instância do Agendamento na API.
///     delete()   -> Deleta os dados de uma instância do Agendamento na API.

/// Os métodos de acesso à API devem ser implementados nessa classe.

/// [Travar o arquivo]
/// Caso deseje "travar" o arquivo para não ser parseado novamente
/// pelo manage do Django adicione um # antes da palavra abaixo
/// FileLocked

import 'package:dio/dio.dart';
import 'package:flutter/material.dart';

import 'model.dart';
import '../../utils/config.dart';
import '../../utils/custom_dio.dart';
import '../../utils/util.dart';

class AppNameService {
  static String _uri = "";
  AppNameModel _appName = AppNameModel();
  List<AppNameModel> _appNameList = List<AppNameModel>();

  AppNameService({AppNameModel appName, List<AppNameModel> appNameList}) {
    if (appName != null) _appName = appName;
  }

  Future<List<AppNameModel>> fetch() async {
    try {
      String _url;
      _appNameList?.clear();
      final CustomDio _dio = CustomDio(_uri);
      _dio.makeHeadersAuthentication();
      final dataResponse = await _dio.getHttp();
      if (dataResponse != null) {
        final String _next =
            dataResponse.containsKey('nextUrl') ? dataResponse["next"] : "";
        final String _previous = dataResponse.containsKey('previousUrl')
            ? dataResponse["previous"]
            : "";
        final _dataItens = dataResponse.containsKey('results')
            ? dataResponse["results"]
            : dataResponse;
        for (var data in _dataItens) {
          AppNameModel appNameModel = AppNameModel.fromMap(data);
          appNameModel.nextUrl = _next;
          appNameModel.previousUrl = _previous;
          _appNameList.add(appNameModel);
        }
        _success("ok");
      }
    } catch (error, exception) {
      _error(error, exception.toString());
    }
    return _appNameList;
  }

  Future<List<AppNameModel>> getMore(String uri) async {
    List<AppNameModel> _appNameList = List<AppNameModel>();
    String _url;
    try {
      final CustomDio _dio = CustomDio(uri);
      _dio.makeHeadersAuthentication();
      final dataResponse = await _dio.getHttp();
      if (dataResponse != null) {
        final String _next =
            dataResponse.containsKey('nextUrl') ? dataResponse["next"] : "";
        final String _previous = dataResponse.containsKey('previousUrl')
            ? dataResponse["previous"]
            : "";
        final _dataItens = dataResponse.containsKey('results')
            ? dataResponse["results"]
            : dataResponse;
        for (var data in _dataItens) {
          AppNameModel appNameModel = AppNameModel.fromMap(data);
          appNameModel.nextUrl = _next;
          appNameModel.previousUrl = _previous;
          _appNameList.add(appNameModel);
        }
        _success("ok");
      }
    } catch (error, exception) {
      _error(error, exception.toString());
    }
    return _appNameList;
  }

  Future<AppNameModel> detail(AppNameModel appName) async {
    String _url = "";
    try {
      final CustomDio _dio = CustomDio(_uri);
      final data = await _dio.getHttp();
      if (data != null) {
        _appName = AppNameModel.fromMap(data);
      }
    } catch (error, exception) {
      _error(error.toString(), exception.toString());
    }
    return _appName;
  }

  Future<AppNameModel> post(AppNameModel appName) async {
    try {
      String _url = "";
      final CustomDio _dio = CustomDio(_uri);
      _dio.makeHeadersAuthentication();
      final data = FormData.fromMap(appName.toMap());
      final dataResponse = await _dio.postHttp(data);
      if (dataResponse != null) {
        appName = AppNameModel.fromMap(dataResponse);
        _success("ok");
      }
    } catch (error, exception) {
      _error(error, exception.toString());
    }
    return appName;
  }

  Future<AppNameModel> put(AppNameModel appName) async {
    try {
      String _url = "";
      final CustomDio _dio = CustomDio(_uri);
      _dio.makeHeadersAuthentication();
      final FormData data = FormData.fromMap({appName.toMap()});
      final dataResponse = await _dio.putHttp(data);
      if (dataResponse != null) {
        return AppNameModel.fromMap(dataResponse);
        _success("ok");
      }
    } catch (error, exception) {
      _error(error, exception.toString());
    }
    return null;
  }

  Future<AppNameModel> patch(AppNameModel appName) async {
    try {
      String _url = "";
      final CustomDio _dio = CustomDio(_uri);
      _dio.makeHeadersAuthentication();
      final FormData data = FormData.fromMap({});
      final dataResponse = await _dio.patchHttp(data);
      if (dataResponse != null) {
        return AppNameModel.fromMap(dataResponse);
        _success("ok");
      }
    } catch (error, exception) {
      _error(error, exception.toString());
    }
    return null;
  }

  Future<bool> delete(AppNameModel appName) async {
    try {
      String _url = "";
      final CustomDio _dio = CustomDio(_uri);
      _dio.makeHeadersAuthentication();
      final data = appName.toMap();
      final dataResponse = await _dio.deleteHttp(data);
      if (dataResponse != null) {
        return true;
        _success("ok");
      }
      return false;
    } catch (error, exception) {
      _error(error, exception.toString());
      return false;
    }
  }

  void _success(String message, {int statusCode}) async {
    try {
      Process.finishSuccess(message, status: statusCode);
    } catch (e) {
      debugPrint("Ocorreu um erro no método error: $e");
    }
  }

  void _error(String error, String exception, {int statusCode}) async {
    try {
      if (Process.isDioError == false) {
        Process.finishError(error, exception, status: statusCode);
      }
    } catch (e) {
      debugPrint("Ocorreu um erro no método error: $e");
    }
  }
}
