/// View/Page para detalhamento de um Atendimento

/// [Travar o arquivo]
/// Caso deseje "travar" o arquivo para nÃ£o ser parseado novamente
/// pelo manage do Django adicione um # antes da palavra abaixo
/// FileLocked

import 'package:flutter/material.dart';
import 'package:provider/provider.dart';

import '../../../user_interface/font.dart';
import '../../../user_interface/widget.dart';
import '../../../utils/localization.dart';
import '../../../utils/process.provider.dart';
import '../../../utils/util.dart';
import '../model.dart';
import '../provider.dart';
import 'update.dart';

class AppNameDetailPage extends StatefulWidget {
  @override
  _AppNameDetailPageState createState() => _AppNameDetailPageState();
}

class _AppNameDetailPageState extends State<AppNameDetailPage> 
  with SingleTickerProviderStateMixin{
  final _scaffoldKey = GlobalKey<ScaffoldState>();
  AnimationController _animationController;

  AppNameModel _appName = AppNameModel();

  @override
  void initState() {
    super.initState();
    _animationController = AnimationController(vsync: this);
  }

  @override
  Widget build(BuildContext context) {
    final _appNameProvider = Provider.of<AppNameProvider>(context, listen: false);
    _appName = _appNameProvider.appNameModel;
    return Scaffold(
      key: _scaffoldKey,
      extendBodyBehindAppBar: true,
      appBar: AppBar(
        backgroundColor: Colors.transparent
      ),
      body: _buildBody(),
      floatingActionButton: FloatingActionButton(
        child: Icon(
          Icons.update,
        ),
        onPressed: () {
          _appNameProvider.appNameModel = _appName;
          Navigator.push(context,
              MaterialPageRoute(builder: (context) => AppNameUpdatePage(),
            ),
          );
        },
      ),
    );
  }

  Widget _buildBody() {
    return Stack(
      children: <Widget>[
        HeadWidget(),
        _buildPage()
      ],
    );
  }

  Widget _buildPage() {
    return SingleChildScrollView(
      child: Container(
        height: MediaQuery.of(context).size.height,
        child: Padding(
          padding: const EdgeInsets.symmetric(vertical: 12.0, horizontal: 10.0),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.stretch,
            children: <Widget>[
              Text(_appName.toString()),
            ],
          ),
        ),
      ),
    );
  }

  _showMessage(String message, {bool error}) {
    setState(() {
      _scaffoldKey.currentState.showSnackBar(
        SnackBar(
          content: Text(message),
          backgroundColor: error == true ? Colors.red : Colors.blue,
        ),
      );
    });
  }

  _makeToast(String texto, {erro = false, altura = 80.0}) async {
    return showDialog(
      context: context,
      builder: (context) {
        return AlertDialog(
          title: Text(''),
          content: Text(texto),
          actions: <Widget>[
            FlatButton(
              child: Text('Cancelar'),
              onPressed: () => Navigator.pop(context),
            ),
            FlatButton(
              child: Text('Excluir'),
              onPressed: () {},
            )
          ],
        );
      },
    );
  }
}