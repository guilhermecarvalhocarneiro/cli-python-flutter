/// [Travar o arquivo]
/// Caso deseje "travar" o arquivo para não ser parseado novamente
/// pelo manage do Django adicione um # antes da palavra abaixo
/// FileLocked

import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';

import '../../../../user_interface/font.dart';
import '../../../../user_interface/widget.dart';
import '../../../../utils/localization.dart';
import '../../../../utils/config.dart';
import '../../../../utils/util.dart';
import '../model.dart';
import '../cubit.dart';

class AppNameUpdatePage extends StatefulWidget {
  @override
  _AppNameAddPageState createState() => _AppNameAddPageState();
}

class _AppNameAddPageState extends State<AppNameUpdatePage> 
  with SingleTickerProviderStateMixin{
  final _scaffoldKey = GlobalKey<ScaffoldState>();
  final _formAppName = GlobalKey<FormState>();

  AnimationController _animationController;
  AppNameModel _appName = AppNameModel();

  $Attributes$

  @override
  void initState() {
    _animationController = AnimationController(vsync: this);
    super.initState();
  }
  
  @override
  void dispose() {
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      key: _scaffoldKey,
      extendBodyBehindAppBar: true,
      appBar: AppBar(
        backgroundColor: Colors.transparent
      ),
      body: _buildBody(),
    );
  }
  
    Widget _buildBody() {
    return BlocConsumer<AppNameCubit, AppNameState>(
      listener: (context, state) {
        if (state is AppNameErrorState){
          _showMessage(state.error, error: true);
          debugPrint("DebugError: No método _buildBody do _buildBody  -> ${state.error}");
        }
        if(state is AppNameSuccessState){
          _showMessage(state.successMessage);
          debugPrint("DebugSuccess: No método _buildBody do _buildBody -> ${state.successMessage}");
        }        
      },
      builder: (context, state) {
        _appName = context.bloc<AppNameCubit>().appNameModel;
        return Stack(
          children: <Widget>[
            HeadWidget(),
            _buildPage(),
          ],
        );
      },
    );
  }

  Widget _buildPage() {
    return SingleChildScrollView(
      child: ConstrainedBox(
        constraints: new BoxConstraints(
          minHeight: MediaQuery.of(context).size.height
        ),
        child: Container(
          padding: const EdgeInsets.symmetric(vertical: 12.0, horizontal: 10.0),
            margin: EdgeInsets.only(
               top: Util.getProportionScreenHeight(
                    context, Config.marginHead),
             ),
            child: Column(
              mainAxisSize: MainAxisSize.max,
              crossAxisAlignment: CrossAxisAlignment.stretch,
              children: <Widget>[
                Padding(
                  padding: const EdgeInsets.only(bottom: 12.0, top: 12.0),
                  child: customTitlePage(context, 
                    'Atualizar AppName',
                  ),
                ),
                 Stack(
                  children : <Widget>[
                    Column(
                      children: <Widget>[
                        _createForm(context),
                        _createButton(context),
                      ]
                    ),
                  ]
                )
              ],
            ),
        ),
      ),
    );
  }

  Widget _createForm(context){
    return Form(
      key: _formAppName,
      child: Column(
        mainAxisSize: MainAxisSize.max,
        crossAxisAlignment: CrossAxisAlignment.stretch,
        children: <Widget>[
          // TODO Implementar os campos do formulário
        ],
      ),
    );
  }
  
  Widget _createButton(context){
    return BlocConsumer<AppNameCubit, AppNameState>(
      listener: (context, state) {},
      builder: (context, state) {
        if (state is AppNameProcessState) {
          return customProcessingWidget(context, isCircularIndicator: false);
        }
      return  Padding(
        padding: const EdgeInsets.only(top: 24.0),
        child: Container(
            width: MediaQuery.of(context).size.width,
            child: customRaisedButton(
              label: 'Salvar',
              context: context,
              onPress: () {
                if (_formAppName.currentState.validate()) {
                  setState(() {
                    $AttributesData$
                    _put();
                  });
                }
              },
            ),
          ),
        );
      },
    );
  }
  
  void _clearForm(){
    // TOdo Implementar o método de limpeza dos campos do formulário
  }

  void _put() async {
    final _appNameCubit = context.bloc<AppNameCubit>();
    try{
      _appNameCubit.put(_appName);
    }catch (e){
      debugPrint("DebugError: No método _put do AppNameUpdatePage -> $e");
    }
  }

  _showMessage(String message, {bool error = false}) {
    setState(() {
      _scaffoldKey.currentState.showSnackBar(
        error == false
            ? customSuccessSnackbar(message)
            : customErrorSnackbar(message),
      );
    });
  }
  
  _hideKeyboard(BuildContext context){
    FocusScope.of(context).requestFocus(FocusNode());
  }

  _makeToast(String texto) async {
    return showDialog(
      context: context,
      builder: (context) {
        return AlertDialog(
          title: Text(''),
          content: Text(texto),
          actions: <Widget>[
            FlatButton(
              child: Text('Cancelar'),
              onPressed: () => Navigator.pop(context),
            ),
            FlatButton(
              child: Text('Excluir'),
              onPressed: () {},
            )
          ],
        );
      },
    );
  }
}