/// Service do model AppName
/// 
/// Os Métodos padrões gerados são:
///     fecthAll() -> Recupera a lista de AppName da API.
///     detail()   -> Recupera os detalhes de AppName da API.
///     post()     -> Salva os dados de uma instância do AppName na API.
///     put()      -> Atualiza os dados de uma instância do AppName na API.
///     delete()   -> Deleta os dados de uma instância do AppName na API.
///
/// Os métodos de acesso à API devem ser implementados no nessa classe.

/// [Travar o arquivo]
/// Caso deseje travar o arquivo para não ser parseado novamente
/// pelo manage do Django remova o # antes da palavra abaixo
/// FileLocked

import 'package:dio/dio.dart';
import 'package:flutter/material.dart';
import 'dart:convert';

import 'model.dart';
import '../../utils/config.dart';
import '../../utils/custom_dio.dart';
import '../../utils/util.dart';

class AppNameService {
  String _uri = "";
  AppNameModel _appName = AppNameModel();
  List<AppNameModel> _appNameList = [];

  AppNameService({AppNameModel appName, List<AppNameModel> appNameList}) {
    if (appName != null) _appName = appName;
  }

  Future<List<AppNameModel>> fetch({String url}) async {
    try {
      String _url = url != null? url: _uri;
      _appNameList?.clear();
      final CustomDio _dio = CustomDio(_url);
      final dataResponse = await _dio.getHttp();
      if (dataResponse != null) {
        final String _next = dataResponse["next"];
        final String _previous = dataResponse["previous"];
        final _dataItems = dataResponse["results"];
        for (var data in _dataItems) {
          AppNameModel _appName = AppNameModel.fromMap(data);
          _appName.nextUrl = _next;
          _appName.previousUrl = _previous;
          _appNameList.add(_appName);
        }
        _success("ok");
      }
    } catch (error, exception) {
      _error(error, exception.toString());
    }
    return _appNameList;
  }

  Future<List<AppNameModel>> getMore(String uri) async {
    try {
      final CustomDio _dio = CustomDio(uri);
      final dataResponse = await _dio.getHttp();
      if (dataResponse != null) {
        final String _next = dataResponse["next"];
        final String _previous = dataResponse["previous"];
        final _dataItems = dataResponse["results"];
        for (var data in _dataItems) {
          AppNameModel _appName = AppNameModel.fromMap(data);
          _appName.nextUrl = _next;
          _appName.previousUrl = _previous;
          _appNameList.add(_appName);
        }
        _success("ok");
      }
    } catch (error, exception) {
      _error(error, exception.toString());
    }
    return _appNameList;
  }
  
  Future<AppNameModel> detail(AppNameModel appName) async {
    _uri += "${appName.id}/";
    try {
      final CustomDio _dio = CustomDio(_uri);
      final data = await _dio.getHttp();
      if (data != null) {
        _appName = AppNameModel.fromMap(data);
      }
    } catch (error, exception) {
      _error(error.toString(), exception.toString());
    }
    return _appName;
  }
  
  Future<AppNameModel> post(AppNameModel appName) async {
    try {
      final CustomDio _dio = CustomDio(_uri);
      final _data = json.encode(appName.toMap());
      final data = await _dio.postHttp(_data);
      if (data != null) {
        _appName = AppNameModel.fromMap(data);
      }
    } catch (error, exception) {
      _error(error.toString(), exception.toString());
    }
    return _appName;
  }

  Future<AppNameModel> put(AppNameModel appName) async {
    _uri += "${appName.id}/";
    try {
      final CustomDio _dio = CustomDio(_uri);
      final _data = json.encode(appName.toMap());
      final data = await _dio.putHttp(_data, appName.id.toString());
      if (data != null) {
        _appName = AppNameModel.fromMap(data);
      }
    } catch (error, exception) {
      _error(error.toString(), exception.toString());
    }
    return _appName;
  }

  Future<AppNameModel> patch(AppNameModel appName) async {
    _uri += "${appName.id}/";
    try {
      final CustomDio _dio = CustomDio(_uri);    
      final _data = json.encode(appName.toMap());
      final data = await _dio.patchHttp(_data);
      if (data != null) {
        _appName = AppNameModel.fromMap(data);
      }
    } catch (error, exception) {
      _error(error.toString(), exception.toString());
    }
    return _appName;
  }

  Future<bool> delete(AppNameModel appName) async {
    _uri += "${appName.id}/";
    try {
      final CustomDio _dio = CustomDio(_uri);    
      final _data = json.encode(appName.toMap());
      final data = await _dio.deleteHttp(_data, appName.id.toString());
      if (data != null) {
        return true;
      }
      return false;
    } catch (error, exception) {
      _error(error.toString(), exception.toString());
      return false;
    }
  }

  void _success(String message, {int statusCode}) async {
    try {
      DebugPrint.print("DebugSuccess: $message, Status: $statusCode");
    } catch (e) {
      _error("$e", "");
    }
  }

  void _error(String error, String exception, {int statusCode}) async {
    try {
      DebugPrint.error(
          "DebugErro: AppNameService -> $error | $exception");
    } catch (error) {
      DebugPrint.error(
          "DebugErro: AppNameService ->$error");
    }
  }
}