/// Os Métodos padrões gerados são:
///   Métodos da API
///     fecth() -> Recupera a lista de AppName.
///     reload() -> Recarrega a lista de AppName.
///     detail() -> Recupera os detalhes de um AppName.
///     post() -> Salva um novo AppName.
///     put() -> Atualiza os dados de um AppName.
///     delete() -> Deleta um AppName.

///   Métodos do Data
///     fetchLocal() -> Recupera a lista de AppName
///     reloadLocal() -> Recarrega a lista de AppName
///     detailLocal() -> Recupera os detalhes de um AppName
///     saveLocal() -> Salva um novo AppName
///     updateLocal() -> Atualiza um novo AppName
///     deleteLocal() -> Deleta um novo AppName
///     deleteAllLocal() -> Deleta um novo AppName

/// [Travar o arquivo]
/// Caso deseje "travar" o arquivo para não ser parseado novamente
/// pelo manage do Django remova o # antes da palavra abaixo
/// FileLocked

import 'package:bloc/bloc.dart';
import 'package:equatable/equatable.dart';
import '../../utils/exception.dart';
import 'model.dart';
import 'service.dart';
import 'data.dart';

part 'state.dart';

class AppNameCubit extends Cubit<AppNameState> {
  AppNameService _service;
  AppNameData _data;
  AppNameModel appNameModel;
  List<AppNameModel> appNameList;

  AppNameCubit() : super(AppNameInitial()) {
    _service = AppNameService();
  }

  Future<void> fetch() async {
    try {
      emit(AppNameProcessState());
      appNameList?.clear();
      appNameList = await _service.fetch();
      emit(
        AppNameSuccessState(
            successMessage: "Dados carregados com sucesso.",
            appNameModel: appNameModel,
            appNameList: appNameList,
        ),
      );
    } catch (e) {
      ExceptionCustom.state("Ocorreu um erro ou executar o método fetch do AppNameCubit", e.toString());
      emit(AppNameErrorState(e.toString()));
    }
  }

  Future<void> reload() async {
    try {
      emit(AppNameProcessState());
      appNameList?.clear();
      appNameList = await _service.fetch();
      emit(AppNameSuccessState(
          successMessage: "Dados carregados com sucesso.",
          appNameModel: appNameModel,
          appNameList: appNameList,
        ),
      );
    } catch (e) {
      ExceptionCustom.state("Ocorreu um erro ou executar o método reload do AppNameCubit", e.toString());
      emit(AppNameErrorState(e.toString()));
    }
  }

  Future<void> getMore(String url) async {
    try {
      emit(AppNameProcessState());
      final data = await _service.getMore(url);
      emit(AppNameSuccessState(
          successMessage: "Dados carregados com sucesso.",
          appNameModel: appNameModel,
          appNameList: appNameList,
        ),
      );
    } catch (e) {
      ExceptionCustom.state("Ocorreu um erro ou executar o método reload do AppNameCubit", e.toString());
      emit(AppNameErrorState(e.toString()));
    }
  }

  Future<void> post(AppNameModel appName) async {
    try {
      emit(AppNameProcessState());
       appNameModel = await _service.post(appName);
      emit(AppNameSuccessState(
        successMessage: "Dados salvos com sucesso.",
        appNameModel: appNameModel,
        appNameList: appNameList,
        ),
      );
    } catch (e) {
      ExceptionCustom.state("Ocorreu um erro ou executar o método post do AppNameCubit", e.toString());
      emit(AppNameErrorState(e.toString()));
    }
  }

  Future<void> put(AppNameModel appName) async {
    try {
      emit(AppNameProcessState());
      appNameModel = await _service.put(appName);
      emit(AppNameSuccessState(
        successMessage: "Dado atualizado com sucesso.",
        appNameModel: appNameModel,
        appNameList: appNameList,
        ),
      );
    } catch (e) {
      ExceptionCustom.state("Ocorreu um erro ou executar o método put do AppNameCubit", e.toString());
      emit(AppNameErrorState(e.toString()));
    }
  }

  Future<void> patch(AppNameModel appName) async {
    try {
      emit(AppNameProcessState());
      appNameModel = await _service.patch(appName);
      emit(AppNameSuccessState(
        successMessage: "Dado atualizado com sucesso.", 
        appNameModel: appNameModel,
        appNameList: appNameList,
        ),
      );
    } catch (e) {
      ExceptionCustom.state("Ocorreu um erro ou executar o método patch do AppNameCubit", e.toString());
      emit(AppNameErrorState(e.toString()));
    }
  }

  Future<void> delete(AppNameModel appName) async {
    try {
      emit(AppNameProcessState());
      await _service.delete(appName);
      emit(AppNameSuccessState(
        successMessage: "Dado deletado com sucesso.",
        appNameModel: appNameModel,
        appNameList: appNameList,
        ),
      );
    } catch (e) {
      ExceptionCustom.state("Ocorreu um erro ou executar o método delete do AppNameCubit", e.toString());
      emit(AppNameErrorState(e.toString()));
    }
  }
}