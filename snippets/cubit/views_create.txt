
/// [Travar o arquivo]
/// Caso deseje "travar" o arquivo para não ser parseado novamente
/// pelo manage do Django remova o # antes da palavra abaixo
/// FileLocked

import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';

import '../../../user_interface/font.dart';
import '../../../user_interface/widget.dart';
import '../../../utils/config.dart';
import '../../../utils/util.dart';
import '../cubit.dart';
import '../model.dart';


class AppNameAddPage extends StatefulWidget {
  static const routeName = "/appNameAddPage";

  @override
  _AppNameAddPageState createState() => _AppNameAddPageState();
}

class _AppNameAddPageState extends State<AppNameAddPage> 
  with SingleTickerProviderStateMixin{
  final _scaffoldKey = GlobalKey<ScaffoldState>();  
  AnimationController _animationController;
  AppNameModel _appName = AppNameModel();
  final _formAppName = GlobalKey<FormState>();

  @override
  void initState() {
    super.initState();
    _animationController = AnimationController(vsync: this);
  }
 
  @override
  void dispose() {
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      key: _scaffoldKey,
      extendBodyBehindAppBar: true,
      appBar: AppBar(
        backgroundColor: Colors.transparent
      ),
      body: _buildBody(),
    );
  }

  Widget _buildBody() {
    return Stack(
      children: <Widget> [
        HeadWidget(),
        _buildPage()
      ]
    );
  }

  Widget _buildPage(){
    return SingleChildScrollView(
      child: ConstrainedBox(
        constraints: new BoxConstraints(
          minHeight: MediaQuery.of(context).size.height
        ),
        child: Container(
        padding: const EdgeInsets.symmetric(vertical: 12.0, horizontal: 10.0),
         margin: EdgeInsets.only(
               top: Util.getProportionScreenHeight(
                    context, Config.marginHead),
             ),
            child: Column(
              mainAxisSize: MainAxisSize.max,
              crossAxisAlignment: CrossAxisAlignment.stretch,
              children: <Widget>[
                Padding(
                  padding: const EdgeInsets.only(bottom: 12.0, top: 12.0),
                  child: customTitlePage(context, 
                    'Cadastrar AppName',
                  ),
                ),

                BlocConsumer<AppNameCubit, AppNameState>(
                listener: (context, state) {
                  if (state is AppNameErrorState){
                    _showMessage(state.error, error: true);
                    DebugPrint.error("DebugError: No método _buildPage do AppNameAddPage  -> ${state.error}");
                  }
                  if(state is AppNameSuccessState){
                    _showMessage(state.successMessage);
                    DebugPrint.print("DebugSuccess: No método _buildPage do AppNameAddPage -> ${state.successMessage}");
                  }
                },
                builder: (context, state) {
                    _appName = context.read<AppNameCubit>().appNameModel;
                    return Stack(
                    children : <Widget>[
                      Column(
                        children: <Widget>[
                          _createForm(context),
                          _createButton(context),
                        ]
                      ),
                    ]
                  );
                },
              )
            ],
          ),
        ),
      ),
    );
  }

  Widget _createForm(context){
    return Form(
      key: _formAppName,
      child: Column(
        mainAxisSize: MainAxisSize.max,
        crossAxisAlignment: CrossAxisAlignment.stretch,
        children: <Widget>[
          // TODO Adicionar os campos do Form
        ],
      ),
    );
  }

  Widget _createButton(context){
    return BlocConsumer<AppNameCubit, AppNameState>(
      listener: (context, state) {},
      builder: (context, state) {
        if (state is AppNameProcessState) {
          return customProcessingWidget(context, isCircularIndicator: false);
        }
        return  Padding(
          padding: const EdgeInsets.only(top: 24.0),
          child: Container(
              width: MediaQuery.of(context).size.width,
              child: customRaisedButton(
                label: 'Salvar',
                context: context,
                onPress: () {
                  if (_formAppName.currentState.validate()) {
                    _post();
                  }
                },
              ),
            ),
        );
      },
    );
  }

  void _clearForm(){
    // TODO Implementar o método de limpeza dos campos do formulário
  }

  void _post() async {
    final _appNameCubit = context.read<AppNameCubit>();
    try{
      _appName = AppNameModel();
      _appNameCubit.appNameModel = _appName;
      _appNameCubit.post(_appName);
    }catch (e){
      DebugPrint.error("DebugError: No método _post do AppNameAddPage -> $e");
    }
  }

  /// Método responsável por mostrar um SnackBar com uma mensagem
  /// com o texto passada como parâmetro
   _showMessage(String message, {bool error = false}) {
    if (message != null && message.isNotEmpty) {
      setState(() {
        _scaffoldKey.currentState.showSnackBar(
          error == false
              ? customSuccessSnackbar(message)
              : customErrorSnackbar(message),
        );
      });
    }
  }

  /// Método responsável por mostrar um modal com o texto informado
  void _makeToast(String texto) async {
    return showDialog(
      context: context,
      builder: (context) {
        return AlertDialog(
          title: Text(''),
          content: Text(texto),
          actions: <Widget>[
            FlatButton(
              child: Text('Cancelar'),
              onPressed: () => Navigator.pop(context),
            ),
            FlatButton(
              child: Text('Excluir'),
              onPressed: () {},
            )
          ],
        );
      },
    );
  }

  /// Método para ocultar o teclado
  _hideKeyboard(BuildContext context){
    FocusScope.of(context).requestFocus(FocusNode());
  }
}