
/// [Travar o arquivo]
/// Caso deseje "travar" o arquivo para não ser parseado novamente
/// pelo manage do Django remova o # antes da palavra abaixo
/// FileLocked

import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter/scheduler.dart';

import 'detail.dart';
import 'create.dart';
import '../model.dart';
import '../cubit.dart';
import '../../../utils/util.dart';
import '../../../utils/config.dart';
import '../../../utils/localization.dart';
import '../../../user_interface/font.dart';
import '../../../user_interface/widget.dart';

class AppNameListPage extends StatefulWidget {
  static const routeName = "/appNameListPage";

  @override
  AppNameListPageState createState() => AppNameListPageState();
}

class AppNameListPageState extends State<AppNameListPage>
  with SingleTickerProviderStateMixin {
  final _scaffoldKey = GlobalKey<ScaffoldState>();
  AnimationController _animationController;
  List<AppNameModel> _appNameList = [];

  @override
  void initState() {
    super.initState();
    _animationController = AnimationController(vsync: this);
    SchedulerBinding.instance.addPostFrameCallback((timeStamp) {
      _loadData();
    });
  }

  @override
  Widget build(BuildContext context) {
    String _title = "AppName";
    return Scaffold(
      key: _scaffoldKey,
      extendBodyBehindAppBar: true,
      appBar: AppBar(
        backgroundColor: Colors.transparent,
      ),
      body: _buildBody(),
      floatingActionButton: FloatingActionButton(
        child: Icon(Icons.add),
        onPressed: () {
          Navigator.pushNamed(context, AppNameAddPage.routeName);
        },
      ),
    );
  }

  Widget _buildBody() {
    return Stack(
      children: <Widget>[
        HeadWidget(),
        _buildPage()
      ],
    );
  }

  Widget _buildPage() {
    return Container(
      alignment: FractionalOffset.topLeft,
      child: RefreshIndicator(
        child: Padding(
          padding: const EdgeInsets.symmetric(vertical: 12.0, horizontal: 10.0),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: <Widget>[
              _listBuilder(),
            ],
          ),
        ),
        onRefresh: _refresh,
      ),
    );
  }

  /// Método responsável por criar o GridView com os 
  /// dados retornados da API
  Widget _listBuilder() {
    return BlocConsumer<AppNameCubit, AppNameState>(
      listener: (context, state) {
        if (state is AppNameErrorState){
          _showMessage(state.error, error: true);
          DebugPrint.error("DebugError: No método _listBuilder do AppNameListPage  -> ${state.error}");
        }
        if(state is AppNameSuccessState){
          _showMessage(state.successMessage);
          DebugPrint.print("DebugSuccess: No método _listBuilder do AppNameListPage -> ${state.successMessage}");
        }
      },
      builder: (context, state) {
        if (state is AppNameProcessState) {
          return customProcessingCardModalCenter(context);
        }
        if (state is AppNameSuccessState){
            if(state.appNameList  == null) {
              return Container(
                child: Center(
                  child: Text("Nenhum Item Retornado"),
                ),
              );
            }
            if (state.appNameList.length > 0){
              return Container(
                margin: EdgeInsets.only(top: Util.getHeightSystemBar(context)),
                height: Util.getProportionScreenHeight(context, 0.8),
                child: GridView.count(
                  crossAxisCount: 2,
                  childAspectRatio: MediaQuery.of(context).size.height / 380,
                  crossAxisSpacing: 2.0,
                  mainAxisSpacing: 4.0,
                  physics: ScrollPhysics(),
                  shrinkWrap: true,
                  children:
                    List.generate(state.appNameList.length, (index) {
                      return InkWell(
                      onTap: () {
                        Navigator.pushNamed(context, AppNameDetailPage.routeName, arguments: state.appNameList[index]);
                      },
                      child: Card(
                        child: Container(
                          child: Center(
                            child: Text(state.appNameList[index].toString()),
                          ),
                        ),
                      ));
                    }),
                ),
              );
            }
            return Container(
                child: Center(
                    child: Text("Nenhum Item Retornado"),
                ),
            );
        }
        return Container();
      },
    );
  }

  /// Método para recarregar os dados da API, quando o usuário
  /// realizar o movimento de puxar a tela para baixa e soltar
  Future<void> _refresh() async {
    try {
    } catch (error) {

    }
  }

  /// Método responsável por mostrar um SnackBar com uma mensagem
  /// com o texto passada como parâmetro
   _showMessage(String message, {bool error = false}) {
    if (message != null && message.isNotEmpty) {
      setState(() {
        _scaffoldKey.currentState.showSnackBar(
          error == false
              ? customSuccessSnackbar(message)
              : customErrorSnackbar(message),
        );
      });
    }
  }

  /// Método responsável por mostrar um modal com o texto informado
  void _makeToast(String texto) async {
    return showDialog(
      context: context,
      builder: (context) {
        return AlertDialog(
          title: Text(''),
          content: Text(texto),
          actions: <Widget>[
            FlatButton(
              child: Text('Cancelar'),
              onPressed: () => Navigator.pop(context),
            ),
            FlatButton(
              child: Text('Excluir'),
              onPressed: () {},
            )
          ],
        );
      },
    );
  }

  /// Método para ocultar o teclado
  _hideKeyboard(BuildContext context){
    FocusScope.of(context).requestFocus(FocusNode());
  }

  /// Método responsável por carregar os dados da API
  Future<void> _loadData() async {
    final _appNameCubit = context.read<AppNameCubit>();
    await _appNameCubit.fetch();
  }
}