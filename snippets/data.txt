/// Local Data do model AppName

/// [Travar o arquivo]
/// Caso deseje "travar" o arquivo para não ser parseado novamente
/// pelo manage do Django adicione um # antes da palavra abaixo
/// FileLocked

import 'package:path/path.dart';
import 'package:sembast/sembast_io.dart' as smbt_io;
import 'package:sembast/sembast.dart' as smbt;
import 'package:path_provider/path_provider.dart';
import 'package:flutter/foundation.dart';


import 'model.dart';
import '../../utils/config.dart';

class AppNameData {
  AppNameModel _appNameModel = AppNameModel();
  static final AppNameData _instance = AppNameData.internal();
  factory AppNameData() => _instance;
  AppNameData.internal();
  smbt.Database _db;
  final String _storeName = "appNameStoreDB";

  Future<smbt.Database> initDb() async {
    try {
      var dir = await getApplicationDocumentsDirectory();
      await dir.create(recursive: true);
      // TODO 0: Alterar o DbName.db para o banco do nome do projeto.
      var dbPath = join(dir.path, 'DbName.db');
      return await smbt_io.databaseFactoryIo.openDatabase(dbPath);
    } catch (error, exception) {
      debugPrint(
          "Erro no método initDB -> error: $error, message: $exception");
    }
    return null;
  }

  Future<List<AppNameModel>> fetch() async {
    try {
      _db = await initDb();
      var _store = smbt.intMapStoreFactory.store(_storeName);
      var _data = await _store.find(_db);
      return _data.map((snapshot){
        final _result = AppNameModel.fromMap(snapshot.value);
        return _result;
      }).toList();
    } catch (e) {
      return null;
    } finally {
      _db.close();
    }
  }

  Future<AppNameModel> get(int id) async {
    try {
      _db = await initDb();
      var _store = smbt.intMapStoreFactory.store(_storeName);
      var _data = await _store.findFirst(_db);
      return AppNameModel.fromMap(_data.value);
    } catch (e) {
      return null;
    } finally {
      _db.close();
    }
  }

  Future<bool> save(AppNameModel appName) async {
    try {
      _db = await initDb();
      var _store = smbt.intMapStoreFactory.store(_storeName);
      await _store.add(_db, appName.toMap());
      return true;
    } catch (error, exception) {
      return false;
    } finally {
      _db.close();
    }
  }

  Future<bool> deleteAll() async {
    try {
      _db = await initDb();
      var _store = smbt.intMapStoreFactory.store(_storeName);
      await _store.delete(_db);
      return true;
    } catch (error, exception) {
      return false;
    } finally {
      _db.close();
    }
  }

  Future<bool> delete(int id) async {
    try {
      _db = await initDb();
      var _store = smbt.intMapStoreFactory.store(_storeName);
      await _store.delete(_db);
      return true;
    } catch (error, exception) {
      return false;
    } finally {
      _db.close();
    }
  }

  Future<bool> update(AppNameModel appName) async {
    try {
      _db = await initDb();
      var _store = smbt.intMapStoreFactory.store(_storeName);
      final finder = smbt.Finder(filter: smbt.Filter.byKey(appName.id));
      await _store.update(
        _db,
        appName.toMap(),
        finder: finder,
      );
      return true;
    } catch (error, exception) {
      return false;
    } finally {
      _db.close();
    }
  }
}